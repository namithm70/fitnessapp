rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Users collection - users can read/write their own data and read others for search
    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == userId;
      
      // Allow access to user profile subcollection
      match /profile/{document=**} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
      
      // Allow access to other user subcollections
      match /{document=**} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }
    
    // Chat rooms collection
    match /chatRooms/{chatRoomId} {
      // Allow read/write if user is a participant in the chat room
      allow read, write: if request.auth != null && 
        (resource == null || request.auth.uid in resource.data.participants);
      
      // Allow create if user is one of the participants
      allow create: if request.auth != null && 
        request.auth.uid in request.resource.data.participants;
      
      // Messages subcollection within chat rooms
      match /messages/{messageId} {
        // Allow read if user is participant in parent chat room
        allow read: if request.auth != null && 
          request.auth.uid in get(/databases/$(database)/documents/chatRooms/$(chatRoomId)).data.participants;
        
        // Allow create if user is the sender and participant in chat room
        allow create: if request.auth != null && 
          request.auth.uid == request.resource.data.senderId &&
          request.auth.uid in get(/databases/$(database)/documents/chatRooms/$(chatRoomId)).data.participants;
        
        // Allow specific, safe updates by participants
        allow update: if request.auth != null &&
          request.auth.uid in get(/databases/$(database)/documents/chatRooms/$(chatRoomId)).data.participants && (
            // 1) Mark as read/delivered
            request.resource.data.diff(resource.data).affectedKeys().hasOnly(['isRead', 'isDelivered'])
            ||
            // 2) Delete for me: only add current user to hiddenForUserIds
            (
              request.resource.data.diff(resource.data).affectedKeys().hasOnly(['hiddenForUserIds']) &&
              request.resource.data.hiddenForUserIds.size() == resource.data.hiddenForUserIds.size() + 1 &&
              request.auth.uid in request.resource.data.hiddenForUserIds
            )
            ||
            // 3) Delete for everyone: only original sender can set deletedForEveryone and replace content with tombstone
            (
              request.auth.uid == resource.data.senderId &&
              request.resource.data.diff(resource.data).affectedKeys().hasOnly(['content', 'deletedForEveryone']) &&
              request.resource.data.deletedForEveryone == true &&
              request.resource.data.content == 'This message was deleted'
            )
          );
      }
    }
    
    // Call sessions collection (for future audio/video calling)
    match /callSessions/{sessionId} {
      // Allow read if user is caller, receiver, or participant
      allow read: if request.auth != null && (
        request.auth.uid == resource.data.callerId ||
        request.auth.uid == resource.data.receiverId ||
        request.auth.uid in resource.data.participants
      );

      // Allow create by caller only
      allow create: if request.auth != null && request.auth.uid == request.resource.data.callerId;

      // Allow updates by participants (narrowed in app logic)
      allow update: if request.auth != null && (
        request.auth.uid == resource.data.callerId ||
        request.auth.uid == resource.data.receiverId ||
        request.auth.uid in resource.data.participants
      );
    }
  }
}
